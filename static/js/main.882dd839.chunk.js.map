{"version":3,"sources":["components/Board/Cells.js","components/Button/Button.js","components/Board/Board.js","App.js","reportWebVitals.js","index.js"],"names":["Cells","props","useState","number","setNumber","className","id","type","rows","cols","maxlength","value","onChange","event","target","onNewBoard","Button","check","board","i","length","duplicateX","Array","duplicateY","j","includes","block","duplicate","Math","floor","solve","cell","checkCol","whichBlock","col","blockNumber","current","boardState","onSubmit","preventDefault","onSolve","Board","counter","setBoard","isSolved","setIsSolved","changeBoard","newNumber","cellId","copyBoard","parseInt","map","nums","toString","newBoard","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.882dd839.chunk.js","sourcesContent":["import React,{useState} from \"react\";\r\nimport \"./Cells.css\";\r\n\r\nfunction Cells(props) {\r\n  const[number,setNumber] = useState(props.number);\r\n  function changeNumber(event){\r\n    setNumber(event.target.value);\r\n    props.onNewBoard(event.target.value,props.id);\r\n  }\r\n  return <div className=\"cell\"><textarea id={props.id} type=\"number\" rows=\"1\" cols=\"1\" maxlength=\"1\" value={number} onChange={changeNumber}></textarea></div>;\r\n}\r\n\r\nexport default Cells;\r\n","import React from \"react\";\r\nfunction Button(props) {\r\n  function check(board) {\r\n    for (var i = 0; i < board.length; i++) {\r\n      // Checking Horizontally and Vertically\r\n      var duplicateX = new Array(10);\r\n      var duplicateY = new Array(10);\r\n      for (var j = 0; j < board[i].length; j++) {\r\n        // Checking Horizontally\r\n        if (duplicateX.includes(board[i][j])) {\r\n          return false;\r\n        } else {\r\n          duplicateX[board[i][j]] = board[i][j];\r\n        }\r\n\r\n        // Checking Vertically\r\n        if (duplicateY.includes(board[j][i])) {\r\n          return false;\r\n        } else {\r\n          duplicateY[board[j][i]] = board[j][i];\r\n        }\r\n      }\r\n    }\r\n    for (var block = 0; block < 9; block++) {\r\n      var duplicate = new Array(10);\r\n      for (\r\n        var i = Math.floor(block / 3) * 3;\r\n        i < Math.floor(block / 3) * 3 + 3;\r\n        i++\r\n      ) {\r\n        for (var j = (block % 3) * 3; j < (block % 3) * 3 + 3; j++) {\r\n          if (duplicate.includes(board[i][j])) {\r\n            return false;\r\n          } else {\r\n            duplicate[board[i][j]] = board[i][j];\r\n          }\r\n        }\r\n      }\r\n    }\r\n    for (var i = 0; i < board.length; i++) {\r\n      if (board[i].includes(0)) return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n  function solve(board) {\r\n    for (var cell = 0; cell < 81; cell++) {\r\n      var i = Math.floor(cell / 9);\r\n      var j = cell % 9;\r\n      if (board[i][j] == 0) {\r\n        for (var value = 1; value < 10; value++) {\r\n          if (!board[i].includes(value)) {\r\n            if (!checkCol(board, j, value)) {\r\n              var block = whichBlock(\r\n                board,\r\n                Math.floor(i / 3) * 3 + Math.floor(j / 3)\r\n              );\r\n              if (\r\n                !block[0].includes(value) &&\r\n                !block[1].includes(value) &&\r\n                !block[2].includes(value)\r\n              ) {\r\n                board[i][j] = value;\r\n\r\n                if (check(board)) {\r\n                  return true;\r\n                }\r\n                if (solve(board)) {\r\n                  return true;\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n\r\n        board[i][j] = 0;\r\n        return false;\r\n      }\r\n    }\r\n  }\r\n  function checkCol(board, col, value) {\r\n    for (var i = 0; i < 9; i++) {\r\n      if (board[i][col] == value) {\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n  function whichBlock(board, blockNumber) {\r\n    var block = [[], [], []];\r\n    for (\r\n      var i = Math.floor(blockNumber / 3) * 3;\r\n      i < Math.floor(blockNumber / 3) * 3 + 3;\r\n      i++\r\n    ) {\r\n      for (var j = (blockNumber % 3) * 3; j < (blockNumber % 3) * 3 + 3; j++) {\r\n        if (i < 3) {\r\n          if (j < 3) block[i][j] = board[i][j];\r\n          else if (j < 6) block[i][j - 3] = board[i][j];\r\n          else block[i][j - 6] = board[i][j];\r\n        } else if (i < 6) {\r\n          if (j < 3) block[i - 3][j] = board[i][j];\r\n          else if (j < 6) block[i - 3][j - 3] = board[i][j];\r\n          else block[i - 3][j - 6] = board[i][j];\r\n        } else {\r\n          if (j < 3) block[i - 6][j] = board[i][j];\r\n          else if (j < 6) block[i - 6][j - 3] = board[i][j];\r\n          else block[i - 6][j - 6] = board[i][j];\r\n        }\r\n      }\r\n    }\r\n    return block;\r\n  }\r\n  let current = props.boardState;\r\n  function submitHandler(event) {\r\n    event.preventDefault();\r\n    if (solve(current)) {\r\n      props.onSolve(current);\r\n    }\r\n  }\r\n  \r\n  return (\r\n    <div>\r\n      <form onSubmit={submitHandler}>\r\n        <button type=\"submit\">Solve</button>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\nexport default Button;\r\n","import React, { useState } from \"react\";\r\nimport Cells from \"./Cells\";\r\nimport \"./Board.css\";\r\nimport Button from \"../Button/Button\";\r\nfunction Board(props) {\r\n  let counter = -1;\r\n  const [board, setBoard] = useState(props.boardState);\r\n  const [isSolved, setIsSolved] = useState(false);\r\n  function solveBoardHandler(newBoard) {\r\n    setBoard(newBoard);\r\n    solved();\r\n  }\r\n  function solved() {\r\n    setIsSolved(true);\r\n  }\r\n  function unsolved(){\r\n    setIsSolved(false);\r\n  }\r\n  function changeBoard(newNumber,cellId){\r\n    let copyBoard = board;\r\n    let row = Math.floor(cellId/9);\r\n    let col = cellId%9;\r\n\r\n    \r\n    copyBoard[row][col] = parseInt(newNumber);\r\n    setBoard(copyBoard);\r\n\r\n    unsolved();\r\n\r\n\r\n  }\r\n  return (\r\n    <div className=\"outer-grid\">\r\n      <div className=\"grid\">\r\n        {!isSolved &&\r\n          board.map((rows) => {\r\n            return rows.map((nums) => {\r\n              counter++;\r\n              return <Cells id={counter.toString()} number={nums} onNewBoard={changeBoard}></Cells>;\r\n            });\r\n          })}\r\n        {isSolved &&\r\n          board.map((rows) => {\r\n            return rows.map((nums) => {\r\n              counter++;\r\n              return <Cells id={counter.toString()} number={nums} onNewBoard={changeBoard}></Cells>;\r\n            });\r\n          })}\r\n      </div>\r\n      <Button boardState={board} onSolve={solveBoardHandler}></Button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Board;\r\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport Board from \"./components/Board/Board\";\nimport Button from \"./components/Button/Button\";\n\nfunction App() {\n  const DUMMY_BOARD = [\n    [0, 0, 8, 4, 0, 3, 5, 0, 6],\n    [0, 0, 3, 1, 0, 2, 0, 0, 4],\n    [0, 4, 5, 7, 0, 0, 0, 9, 0],\n    [6, 9, 0, 0, 0, 5, 0, 0, 7],\n    [0, 8, 0, 0, 0, 0, 0, 5, 0],\n    [4, 0, 0, 3, 0, 0, 0, 1, 8],\n    [0, 7, 0, 0, 0, 6, 2, 4, 0],\n    [1, 0, 0, 5, 0, 7, 8, 0, 0],\n    [8, 0, 6, 9, 0, 1, 3, 0, 0],\n  ];\n  return (\n    <div className=\"App\">\n      <Board boardState={DUMMY_BOARD} />\n      \n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}